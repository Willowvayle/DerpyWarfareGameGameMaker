<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayerUnitType</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set beginning variables


// Constant Unit Types
UPPERLEFT = 0;
UPPERRIGHT = 1;
LOWERLEFT = 3;
LOWERRIGHT = 4;
BOTTOM = 5;


// Variable that holds the current unit selected for player 1 and two
currentUnitType1 = UPPERLEFT;
currentUnitType2 = UPPERLEFT;

// Set names based on faction
if (globFaction == "Plants"){
    NAME[UPPERLEFT]  = "Peashooter (Soldier)";
    NAME[UPPERRIGHT] = "Sunflower (Healer)";
    NAME[LOWERLEFT]  = "Chomper (Melee)";
    NAME[LOWERRIGHT] = "Cactus (Sniper)";
}
else {
    NAME[UPPERLEFT]  = "Foot Soldier (Solider)";
    NAME[UPPERRIGHT] = "All-Star (Tank)";
    NAME[LOWERLEFT]  = "Engineer (Support)";
    NAME[LOWERRIGHT] = "Scientist (Scientist)";
}
NAME[BOTTOM] = "Go Back";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Change selection if a key is pressed

// Check each key, the values change based on where we currently are

// Controls for player 1 are WASD, Space bar to enter:
    // Up and down
    if (keyboard_check_pressed(ord('W'))) {
        // Check to see where we go
        switch(currentUnitType1) {
            case LOWERLEFT: currentUnitType1 = UPPERLEFT; break;
            case UPPERLEFT: currentUnitType1 = LOWERLEFT; break;
            case LOWERRIGHT: currentUnitType1 = UPPERRIGHT; break;
            case UPPERRIGHT: currentUnitType1 = LOWERRIGHT; break;
            case BOTTOM: currentUnitType1 = LOWERLEFT; break;
        }
    }
    if (keyboard_check_pressed(ord('S'))) {
        // Check to see where we go
        switch(currentUnitType1) {
            case LOWERLEFT: currentUnitType1 = BOTTOM; break;
            case UPPERLEFT: currentUnitType1 = LOWERLEFT; break;
            case LOWERRIGHT: currentUnitType1 = BOTTOM; break;
            case UPPERRIGHT: currentUnitType1 = LOWERRIGHT; break;
            case BOTTOM: currentUnitType1 = UPPERLEFT; break;
        }
    }
    
    // Left and right
    if (keyboard_check_pressed(ord('A')) || keyboard_check_pressed(ord('D'))) {
        // Check to see where we go
        switch(currentUnitType1) {
            case LOWERLEFT: currentUnitType1 = LOWERRIGHT; break;
            case UPPERLEFT: currentUnitType1 = UPPERRIGHT; break;
            case LOWERRIGHT: currentUnitType1 = LOWERLEFT; break;
            case UPPERRIGHT: currentUnitType1 = UPPERLEFT; break;
        }
    }
    
    // Enter selection
    if (keyboard_check_pressed(vk_space)){
        // Check if going back or not
        if (currentUnitType1 == BOTTOM) {
            room_goto_previous();
        }
        else {
            player1 = NAME[currentUnitType1];
        }
    }
    
    
    
// Controls for player 2 are Up, Down, Left, and Right keys: (make sure to check that there is a second player)
if (globPlayers == 2) {
    // Up and down
    if (keyboard_check_pressed(vk_up) || keyboard_check_pressed(vk_down)) {
        // Check to see where we go
        switch(currentUnitType2) {
            case LOWERLEFT: currentUnitType2 = UPPERLEFT; break;
            case UPPERLEFT: currentUnitType2 = LOWERLEFT; break;
            case LOWERRIGHT: currentUnitType2 = UPPERRIGHT; break;
            case UPPERRIGHT: currentUnitType2 = LOWERRIGHT; break;
        }
    }
    
    // Left and right
    if (keyboard_check_pressed(vk_right) || keyboard_check_pressed(vk_left)) {
        // Check to see where we go
        switch(currentUnitType2) {
            case LOWERLEFT: currentUnitType2 = LOWERRIGHT; break;
            case UPPERLEFT: currentUnitType2 = UPPERRIGHT; break;
            case LOWERRIGHT: currentUnitType2 = LOWERLEFT; break;
            case UPPERRIGHT: currentUnitType2 = UPPERLEFT; break;
        }
    }
    
     // Enter selection
    if (keyboard_check_pressed(vk_enter)){
        player2 = NAME[currentUnitType2];
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check if we should move on

if (player1 != "" &amp;&amp; (player2 != "" || globPlayers == 1)) {
    room_goto_next();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
