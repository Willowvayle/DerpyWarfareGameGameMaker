<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset image blend to white
image_blend = c_white;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Return to normal chomper, and do damage if necessary
sprite_index = sprChomper;

target = instance_nearest(x, y, objEnemy);

// Are they in range?
if (distance_to_object(target) &lt; 15) {
    target.hp -= 25;
    alarm[0] = room_speed * reloadRate;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Fire at the player!!!

// If a melee attack
if (projSpd == 0){
    // Check if we are the chomper
    if (sprite_index == sprChomper) {
        sprite_index = sprChomperBite;
        alarm[1] = room_speed/4; // Alarm to set us back to regular
    }
}
else {
    var proj = instance_create(x, y, objPlayerProjectile);
    
    switch(sprite_index){
        case sprPeashooter: proj.sprite_index = sprPeashooterPellet; break;
        case sprSunflower: proj.sprite_index = sprSunflowerSun; break;
        case sprCactus: proj.sprite_index = sprCactusNeedle; break;
        
        case sprFootSoldier: proj.sprite_index = sprFootSoldierBullet; break;
        case sprAllStar: proj.sprite_index = sprAllStarFootball; break;
        case sprEngineer: proj.sprite_index = sprEngineerBomb; break;
        case sprScientist: proj.sprite_index = sprScientistLightning; break;
    }
    
    proj.direction = image_angle;
    proj.image_angle = image_angle;
    proj.speed = projSpd;
    proj.dmgMin = dmgMin;
    proj.dmgMax = dmgMax;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move towards player while shooting randomly

target = instance_nearest(x, y, objEnemy);

// Make sure to stop moving if we get too close to player
if (instance_exists(target)) {

    // Check what the distance will be based on whether they are a melee fighter or not
    var dist;
    if (projSpd == 0){
        dist = 15;
    }
    else {
        dist = 60;
    }

    if (distance_to_object(target) &lt; dist){
        speed = 0;
    }
    else{
        move_towards_point(target.x, target.y, spd);
    }
    image_angle = point_direction(x, y, target.x, target.y);
}



if (alarm[0] &lt; 0) {
    alarm[0] = irandom_range(room_speed, room_speed * 4);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check if dead

if (hp &lt;= 0) {
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objEnemyProjectile">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Take damage
with(other) instance_destroy();
hp -= random_range(other.dmgMin, other.dmgMax);
image_blend = c_red;
alarm[2] = 15; // Alarm set to change image blend to normal afterwards
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
