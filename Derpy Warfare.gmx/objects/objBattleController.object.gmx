<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check if second player is needed

if (globPlayers != 2) {
    with(objPlayer2) instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set battle variables and alter music

// Set a true random experience
randomize();

// Change music if needed
if (!audio_is_playing(sndBattle)){
    audio_stop_all();
    audio_play_sound(sndBattle, 1, true);
}

// Set variable
score = 0;

wave = 0;

waveTimer = 5; // Time before next wave

enemyCount = 0; // So we know how many enemies are in the field

frequency = 3; // Frequency of waves

alarm[0] = room_speed * waveTimer;


// Set array to hold the backgrounds that will display at random between waves
background[0] = bckgrndBattle1;
background[1] = bckgrndBattle2;
background[2] = bckgrndBattle3;
background[3] = bckgrndBattle4;
background[4] = bckgrndBattle5;
background[5] = bckgrndBattle6;
background[6] = bckgrndBattle7;
background[7] = bckgrndBattle8;
background[8] = bckgrndBattle9;
background[9] = bckgrndBattle10;
background[10] = bckgrndBattle11;
background[11] = bckgrndBattle12;
background[12] = bckgrndBattle13;
background[13] = bckgrndBattle14;
background[14] = bckgrndBattle15;
background[15] = bckgrndBattle16;
background[16] = bckgrndBattle17;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Spawn the enemy
    instance_create(random_range(0, 400), -200, objCrate);
    var enemy = instance_create(room_width + 100, random_range(0, room_height), objEnemy);    

    // Assign a sprite index to enemy based on faction of player
    if (globFaction == "Plants"){
        switch(enemyOptions){
            case 1: enemy.sprite_index = sprFootSoldier; break;
            case 2: enemy.sprite_index = choose(sprFootSoldier, sprAllStar); break;
            case 3: enemy.sprite_index = choose(sprFootSoldier, sprAllStar, sprEngineer); break;
            case 4: enemy.sprite_index = choose(sprFootSoldier, sprAllStar, sprEngineer, sprScientist); break;
        }
    }
    else{
        switch(enemyOptions){
            case 1: enemy.sprite_index = sprPeashooter; break;
            case 2: enemy.sprite_index = choose(sprPeashooter, sprSunflower); break;
            case 3: enemy.sprite_index = choose(sprPeashooter, sprSunflower, sprChomper); break;
            case 4: enemy.sprite_index = choose(sprPeashooter, sprSunflower, sprChomper, sprCactus); break;
        }
    }
    
    // Check what stats to assign based on the sprite index selected
    switch(enemy.sprite_index){
        case sprPeashooter:
                enemy.hp = 75;
                enemy.dmgMin = 12;
                enemy.dmgMax = 18;
                enemy.ammo = 12;
                enemy.reloadRate = 1.5;
                enemy.projSpd = 4;
                enemy.spd = 4;
                enemy.scorePoint = 1;
                break;
                
        case sprSunflower:
                enemy.hp = 66;
                enemy.dmgMin = 5;
                enemy.dmgMax = 8;
                enemy.ammo = 50;
                enemy.reloadRate = 2;
                enemy.projSpd = 5;
                enemy.spd = 5;
                enemy.scorePoint = 2;
                break;
                
        case sprChomper:
                enemy.hp = 86;
                enemy.dmgMin = 25;
                enemy.dmgMax = 25;
                enemy.ammo = 1;
                enemy.reloadRate = 2;
                enemy.projSpd = 0;
                enemy.spd = 3;
                enemy.scorePoint = 3;
                break;
                
        case sprCactus:
                enemy.hp = 60;
                enemy.dmgMin = 12;
                enemy.dmgMax = 16;
                enemy.ammo = 15;
                enemy.reloadRate = 2;
                enemy.projSpd = 7;
                enemy.spd = 5;
                enemy.scorePoint = 4;
                break;
                
    
        case sprFootSoldier:
                enemy.hp = 45;
                enemy.dmgMin = 4;
                enemy.dmgMax = 8;
                enemy.ammo = 35;
                enemy.reloadRate = 2;
                enemy.projSpd = 5;
                enemy.spd = 5;
                enemy.scorePoint = 1;
                break;
                
        case sprAllStar:
                enemy.hp = 125;
                enemy.dmgMin = 3;
                enemy.dmgMax = 9;
                enemy.ammo = 1;
                enemy.reloadRate = 0.25; // Very fast
                enemy.projSpd = 8;
                enemy.spd = 2;
                enemy.scorePoint = 2;
                break;
                
        case sprEngineer:
                enemy.hp = 75;
                enemy.dmgMin = 17;
                enemy.dmgMax = 16;
                enemy.ammo = 15;
                enemy.reloadRate = 2.5;
                enemy.projSpd = 4;
                enemy.spd = 4;
                enemy.scorePoint = 3;
                break;
                
        case sprScientist:
                enemy.hp = 66;
                enemy.dmgMin = 0; // Damage will be calculated based on distance from target
                enemy.dmgMax = 0;
                enemy.ammo = 6;
                enemy.reloadRate = 2.2;
                enemy.projSpd = 4;
                enemy.spd = 4;
                enemy.scorePoint = 4;
                break;
    }
    
    // Subtract one from the sapwn count
    enemySpawnCount -= 1;
    
    // Keep going if there are more to spawn
    if (enemySpawnCount &gt; 0) {
        alarm[1] = room_speed * frequency / irandom_range(1, wave);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Increase the wave, spawn bad guys

wave += 1;

// Set enemy count based on what wave we are
if (wave &lt;= 5){
    enemyCount = irandom_range(3, 8);
    enemyOptions = 1; // How many bad guys can we choose from?
    
}
else if (wave &lt;= 10) {
    enemyCount = irandom_range(5, 16);
    enemyOptions = 2;
}
else if (wave &lt;= 15) {
    enemyCount = irandom_range(10, 23);
    enemyOptions = 3;
}
else {
    enemyCount = irandom_range(14, 38);
    enemyOptions = 4;
}

enemySpawnCount = enemyCount;

// Create an alarm that will keep going until all bad guys are spawned
alarm[1] = room_speed * frequency / irandom_range(1, wave);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check if there are no more enemies

if (enemyCount == 0 &amp;&amp; alarm[0] &lt; 0) {
    alarm[0] = room_speed * waveTimer;
    background_index[0] = background[irandom_range(0, array_length_1d(background)-1)];
    //background_xscale[0] = 1 * (room_width / background_width[0]);
    background_yscale[0] = 1 * (room_height / background_height[0]);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check if there are no more players

if (!instance_exists(objPlayer1) &amp;&amp; !instance_exists(objPlayer2)){
    room_goto_next();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw current score, wave, and timer

draw_set_font(fntMain);

draw_set_color(c_black);

draw_text(5, 5, "Score: " + string(score));
draw_text(room_width - 100, 5, "Wave: " + string(wave));

// Draw enemyCount if there is one, otherwise show the timer
if (enemyCount &gt; 0) {
    draw_text(5, 32, "Enemies: " + string(enemyCount));
}
else {
    draw_text(5, 32, "Wave Timer: " + string_format(alarm[0]/room_speed, 1, 0));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
